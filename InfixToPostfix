#include<stdio.h>
#include<stdlib.h>
#include<string.h>
// #include<malloc.h>

struct stack
{
  int top;
  int size;
  char *arr;
};

int isEmpty (struct stack* ptr)
{
  if (ptr->top == -1)
    return 1;
  else
    return 0;
}

int isFull(struct stack* ptr){
    if(ptr->top == ptr->size-1)
    return 1;
    else
    return 0;
}

void push(struct stack* ptr , char data){
    if(isFull(ptr)){
        printf("Stack Overflow ,Cannot push %d to the stack\n",data);
    }
    else{
        ptr->top = ptr->top + 1;
        ptr->arr[ptr->top] = data;
     //   printf("The Element %d is pushed into the stack\n",data);
    }
}

char pop(struct stack* ptr){
    // char val                 //**************Big mistake was here int val
    if(isEmpty(ptr)){
        printf("Stack Underflow ,Cannot pop from the stack\n");
    }
    else{
        char val = ptr->arr[ptr->top];
        ptr->top = ptr->top - 1;
        return val;
    }
    // return val;
}

int stackTop(struct stack*ptr){
    return ptr->arr[ptr->top];
}

int prec(char op){
    if(op == '*' || op == '/')
    return 3;
    else if(op == '+' || op == '-')
    return 2;
    else
    return 0;
}

int isOperator(char ch){
    if(ch == '+' || ch == '-' || ch == '*' || ch == '/')
        return 1;
    else
        return 0;
}

char* InfixtoPostfix(char* infix){
    struct stack*sp = (struct stack*)malloc(sizeof(struct stack));
    sp->top = -1;
    sp->size = 100;
    sp->arr = (char*)malloc(sp->size*sizeof(char));
    
    char* Postfix = (char*)malloc((strlen(infix)+1)*sizeof(char));                    //array or not
    int i=0;    //For Scanning Infix Expression
    int j=0;    //For filling the Postfix Expression
    
    while(infix[i] != '\0'){                                                    //infix array no
        if(!isOperator(infix[i])){
            Postfix[j] = infix[i];
            i++;
            j++;
        }
        else{
            if(prec(infix[i]) > prec(stackTop(sp))){
                push(sp,infix[i]);
                i++;
            }
            else{
                Postfix[j] = pop(sp);
                j++;
            }
        }
    }
    
    while(!isEmpty(sp)){
        Postfix[j] = pop(sp);
        j++;
    }
    
    Postfix[j] = '\0';
    
return Postfix;    
}

int main()
{
    char* infix;
    printf("Enter the Infix Expression to convert into postfix expression\n");
    scanf("%s",infix);
    
    char* postfix = InfixtoPostfix(infix);
    
    printf("Postfix of Given  infix expression is %s",postfix);
    return 0;
}



