#include<stdio.h>
#include<stdlib.h>

struct stack
{
  int size;
  int top;
  char *arr;
};

int
isEmpty (struct stack *ptr)
{
  if (ptr->top == -1)
    return 1;
    else
  return 0;
}

int
isFull (struct stack *ptr)
{
  if (ptr->top == ptr->size - 1)
    return 1;
    else
  return 0;
}

void
push (struct stack *ptr, char val)
{
  if (isFull (ptr))
    {
      printf ("Stack Overflow cannot push %d into the Stack\n", val);
    }

  else
    {
      ptr->top++;
      ptr->arr[ptr->top] = val;
    }
}

char
pop (struct stack *ptr)
{
  if (isEmpty (ptr))
    {
      printf ("Stack Underflow cannot pop from the Stack\n");
      /*i think this -1 is wrong (returntype is char no)but this is not wrong --> */
	return -1;
    }

  else
    {
      char val = ptr->arr[ptr->top];
      ptr->top--;
      return val;
    }
}


int
peek (struct stack *ptr, int i)
{
  if (ptr->top - i + 1 < 0)
    {
      printf ("Invalid position\n");
      return -1;
    }
  else
    {
      return ptr->arr[ptr->top - i + 1];
    }
}

int
stackTop (struct stack *ptr)
{
  return ptr->arr[ptr->top];
}


int
stackBottom (struct stack *ptr)
{
  return ptr->arr[0];
}

/* parenthesisMatch function for only ( and ) parenthesis */

// int parenthesisMatch(char *exp){

//     struct stack* sp = (struct stack*)malloc(sizeof(struct stack));
//     sp->size = 100;
//     sp->top = -1;
//     sp->arr = (char*)malloc(sp->size*sizeof(char));

//     for(int i=0; exp[i] != '\0'; i++){

//         if(exp[i] == '(')
//         push(sp,exp[i]);

//         else if(exp[i] == ')'){
//             if(isEmpty(sp))
//             return 0;
//             else{
//             pop(sp);
//           ////////////////////////// This is totally wrong ---> return 1;
//           }
//         }
//     }

//     if(isEmpty(sp)){
//     return 1;
//     }
//     else{
//     return 0;
//     }
// }

/* parenthesisMatch function for multiparenthesis */

int
match (char a, char b)
{
  if (a == '(' && b == ')' || a == '[' && b == ']' || a == '{' && b == '}')
    return 1;
  else
    return 0;
}

int
parenthesisMatch (char *exp)
{

  struct stack *sp = (struct stack *) malloc (sizeof (struct stack));
  sp->size = 100;
  sp->top = -1;
  sp->arr = (char *) malloc (sp->size * sizeof (char));
  char poppedchar;
  for (int i = 0; exp[i] != '\0'; i++)
    {

      if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{')
	push (sp, exp[i]);

      else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}')
	{
	  if (isEmpty (sp))
	    return 0;
	  
	    

	      poppedchar = pop(sp);
	    
	  if (!match (exp[i], poppedchar)){
	    return 0;
	  }
	  // else
	  // return 1;


	}
    }				//Loop closed

  if (isEmpty (sp))
    {
      return 1;
    }
  else
    {
      return 0;
    }
}				//Function closed



int
main ()
{

  char *exp = "()";

  if (parenthesisMatch (exp))
    printf ("The parenthesis is Balanced\n");
  else
    printf ("The parenthesis is Not Balanced\n");



  return 0;
}

